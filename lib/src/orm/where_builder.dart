/// Base classes and utilities for generated where builder classes.
///
/// This library provides the foundation for entity-specific where builders
/// that will be generated by the build_runner code generator. Each entity
/// will have its own generated where builder and field condition classes.
///
/// ## Generated Structure
///
/// For a User entity with fields (name, email, age), the generator creates:
///
/// ```dart
/// class UserWhereBuilder {
///   UserStringFieldCondition get name => UserStringFieldCondition('name');
///   UserStringFieldCondition get email => UserStringFieldCondition('email');
///   UserNumberFieldCondition get age => UserNumberFieldCondition('age');
/// }
///
/// class UserStringFieldCondition extends StringFieldCondition {
///   UserStringFieldCondition(super.fieldPath);
/// }
///
/// class UserNumberFieldCondition extends NumberFieldCondition {
///   UserNumberFieldCondition(super.fieldPath);
/// }
/// ```
///
/// Usage:
/// ```dart
/// final users = await db.query<User>()
///   .where((t) => t.name.equals('Alice') & t.age.greaterThan(18))
///   .execute();
/// ```
library;

import 'where_condition.dart';

/// Base class for string field condition builders.
import 'where_condition.dart';
///
/// This class provides methods for building conditions on string fields.
/// Entity-specific subclasses are generated to provide type safety.
///
/// Example:
/// ```dart
/// class UserNameCondition extends StringFieldCondition {
///   UserNameCondition(super.fieldPath);
/// }
/// ```
class StringFieldCondition {
  /// Creates a string field condition builder.
  ///
  /// [fieldPath] - The field path (e.g., 'name' or 'location.city')
  StringFieldCondition(this.fieldPath);

  /// The field path for this condition.
  final String fieldPath;

  /// Creates an equality condition (field = value).
  ///
  /// Example:
  /// ```dart
  /// t.name.equals('Alice')
  /// ```
  WhereCondition equals(String value) => EqualsCondition(fieldPath, value);

  /// Creates a contains condition (field CONTAINS substring).
  ///
  /// Example:
  /// ```dart
  /// t.email.contains('@example.com')
  /// ```
  WhereCondition contains(String substring) =>
      ContainsCondition(fieldPath, substring);

  /// Creates a case-insensitive pattern matching condition.
  ///
  /// Supports % (any characters) and _ (single character) wildcards.
  ///
  /// Example:
  /// ```dart
  /// t.name.ilike('%john%')
  /// ```
  WhereCondition ilike(String pattern) => IlikeCondition(fieldPath, pattern);

  /// Creates a starts with condition.
  ///
  /// Example:
  /// ```dart
  /// t.email.startsWith('admin')
  /// ```
  WhereCondition startsWith(String prefix) =>
      StartsWithCondition(fieldPath, prefix);

  /// Creates an ends with condition.
  ///
  /// Example:
  /// ```dart
  /// t.domain.endsWith('.com')
  /// ```
  WhereCondition endsWith(String suffix) =>
      EndsWithCondition(fieldPath, suffix);

  /// Creates an IN list condition.
  ///
  /// Example:
  /// ```dart
  /// t.status.inList(['active', 'pending'])
  /// ```
  WhereCondition inList(List<String> values) =>
      InListCondition(fieldPath, values);
}

/// Base class for numeric field condition builders.
///
/// This class provides methods for building conditions on numeric fields
/// (int, double, num).
///
/// Example:
/// ```dart
/// class UserAgeCondition extends NumberFieldCondition {
///   UserAgeCondition(super.fieldPath);
/// }
/// ```
class NumberFieldCondition<T extends num> {
  /// Creates a numeric field condition builder.
  ///
  /// [fieldPath] - The field path (e.g., 'age' or 'stats.score')
  NumberFieldCondition(this.fieldPath);

  /// The field path for this condition.
  final String fieldPath;

  /// Creates an equality condition (field = value).
  ///
  /// Example:
  /// ```dart
  /// t.age.equals(25)
  /// ```
  WhereCondition equals(T value) => EqualsCondition(fieldPath, value);

  /// Creates a greater than condition (field > value).
  ///
  /// Example:
  /// ```dart
  /// t.age.greaterThan(18)
  /// ```
  WhereCondition greaterThan(T value) =>
      GreaterThanCondition(fieldPath, value);

  /// Creates a less than condition (field < value).
  ///
  /// Example:
  /// ```dart
  /// t.age.lessThan(65)
  /// ```
  WhereCondition lessThan(T value) => LessThanCondition(fieldPath, value);

  /// Creates a greater than or equal condition (field >= value).
  ///
  /// Example:
  /// ```dart
  /// t.score.greaterOrEqual(100)
  /// ```
  WhereCondition greaterOrEqual(T value) =>
      GreaterOrEqualCondition(fieldPath, value);

  /// Creates a less than or equal condition (field <= value).
  ///
  /// Example:
  /// ```dart
  /// t.score.lessOrEqual(1000)
  /// ```
  WhereCondition lessOrEqual(T value) =>
      LessOrEqualCondition(fieldPath, value);

  /// Creates a between condition (field >= min AND field <= max).
  ///
  /// Example:
  /// ```dart
  /// t.age.between(18, 65)
  /// ```
  WhereCondition between(T min, T max) =>
      BetweenCondition(fieldPath, min, max);

  /// Creates an IN list condition.
  ///
  /// Example:
  /// ```dart
  /// t.status.inList([1, 2, 3])
  /// ```
  WhereCondition inList(List<T> values) => InListCondition(fieldPath, values);
}

/// Base class for boolean field condition builders.
///
/// This class provides methods for building conditions on boolean fields.
///
/// Example:
/// ```dart
/// class UserVerifiedCondition extends BoolFieldCondition {
///   UserVerifiedCondition(super.fieldPath);
/// }
/// ```
class BoolFieldCondition {
  /// Creates a boolean field condition builder.
  ///
  /// [fieldPath] - The field path (e.g., 'verified' or 'settings.enabled')
  BoolFieldCondition(this.fieldPath);

  /// The field path for this condition.
  final String fieldPath;

  /// Creates an equality condition (field = value).
  ///
  /// Example:
  /// ```dart
  /// t.verified.equals(true)
  /// ```
  WhereCondition equals(bool value) => EqualsCondition(fieldPath, value);

  /// Creates a condition checking if field is true.
  ///
  /// Example:
  /// ```dart
  /// t.verified.isTrue()
  /// ```
  WhereCondition isTrue() => EqualsCondition(fieldPath, true);

  /// Creates a condition checking if field is false.
  ///
  /// Example:
  /// ```dart
  /// t.verified.isFalse()
  /// ```
  WhereCondition isFalse() => EqualsCondition(fieldPath, false);
}

/// Base class for DateTime field condition builders.
///
/// This class provides methods for building conditions on DateTime fields.
///
/// Example:
/// ```dart
/// class UserCreatedAtCondition extends DateTimeFieldCondition {
///   UserCreatedAtCondition(super.fieldPath);
/// }
/// ```
class DateTimeFieldCondition {
  /// Creates a DateTime field condition builder.
  ///
  /// [fieldPath] - The field path (e.g., 'createdAt' or 'metadata.timestamp')
  DateTimeFieldCondition(this.fieldPath);

  /// The field path for this condition.
  final String fieldPath;

  /// Creates an equality condition (field = value).
  ///
  /// Example:
  /// ```dart
  /// t.createdAt.equals(DateTime.now())
  /// ```
  WhereCondition equals(DateTime value) => EqualsCondition(fieldPath, value);

  /// Creates a before condition (field < value).
  ///
  /// Example:
  /// ```dart
  /// t.createdAt.before(DateTime.now())
  /// ```
  WhereCondition before(DateTime value) => LessThanCondition(fieldPath, value);

  /// Creates an after condition (field > value).
  ///
  /// Example:
  /// ```dart
  /// t.createdAt.after(DateTime(2024, 1, 1))
  /// ```
  WhereCondition after(DateTime value) => GreaterThanCondition(fieldPath, value);

  /// Creates a between condition for date ranges.
  ///
  /// Example:
  /// ```dart
  /// t.createdAt.between(startDate, endDate)
  /// ```
  WhereCondition between(DateTime start, DateTime end) =>
      BetweenCondition(fieldPath, start, end);
}
